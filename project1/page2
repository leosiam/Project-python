import tkinter as tk
from tkinter import messagebox
import sqlite3
from tkinter import ttk


# ฟังก์ชันในการเพิ่มข้อมูล
def add_transaction():
    type = type_var.get()
    amount = amount_entry.get()
    description = description_entry.get()
    date = date_entry.get()

    if not amount or not date:
        messagebox.showwarning("Input Error", "Amount and Date are required")
        return

    try:
        amount = float(amount)
    except ValueError:
        messagebox.showwarning("Input Error", "Amount must be a number")
        return

    conn = sqlite3.connect('expenses_income.db')
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO transactions (type, amount, description, date)
    VALUES (?, ?, ?, ?)
    ''', (type, amount, description, date))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Transaction added successfully")
    clear_entries()
    update_treeview()


# ฟังก์ชันในการแก้ไขข้อมูล
def edit_transaction():
    selected_item = tree.selection()
    if not selected_item:
        messagebox.showwarning("Selection Error", "Please select a transaction to edit")
        return

    item_id = tree.item(selected_item)['values'][0]
    type = type_var.get()
    amount = amount_entry.get()
    description = description_entry.get()
    date = date_entry.get()

    if not amount or not date:
        messagebox.showwarning("Input Error", "Amount and Date are required")
        return

    try:
        amount = float(amount)
    except ValueError:
        messagebox.showwarning("Input Error", "Amount must be a number")
        return

    conn = sqlite3.connect('expenses_income.db')
    cursor = conn.cursor()
    cursor.execute('''
    UPDATE transactions
    SET type = ?, amount = ?, description = ?, date = ?
    WHERE id = ?
    ''', (type, amount, description, date, item_id))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Transaction updated successfully")
    clear_entries()
    update_treeview()


# ฟังก์ชันในการลบข้อมูล
def delete_transaction():
    selected_item = tree.selection()
    if not selected_item:
        messagebox.showwarning("Selection Error", "Please select a transaction to delete")
        return

    item_id = tree.item(selected_item)['values'][0]
    conn = sqlite3.connect('expenses_income.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM transactions WHERE id = ?', (item_id,))
    conn.commit()
    conn.close()
    messagebox.showinfo("Success", "Transaction deleted successfully")
    update_treeview()


# ฟังก์ชันในการล้างข้อมูลในฟอร์ม
def clear_entries():
    amount_entry.delete(0, tk.END)
    description_entry.delete(0, tk.END)
    date_entry.delete(0, tk.END)


# ฟังก์ชันในการอัปเดต Treeview
def update_treeview():
    for row in tree.get_children():
        tree.delete(row)

    conn = sqlite3.connect('expenses_income.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM transactions')
    rows = cursor.fetchall()
    conn.close()

    for row in rows:
        tree.insert('', tk.END, values=row)


# สร้างหน้าต่างหลัก
root = tk.Tk()
root.title("Expense Tracker")

# สร้างฟอร์มเพิ่มข้อมูล
frame = tk.Frame(root)
frame.pack(padx=10, pady=10)

tk.Label(frame, text="Type").grid(row=0, column=0, padx=5, pady=5)
type_var = tk.StringVar(value="income")
tk.Radiobutton(frame, text="Income", variable=type_var, value="income").grid(row=0, column=1, padx=5, pady=5)
tk.Radiobutton(frame, text="Expense", variable=type_var, value="expense").grid(row=0, column=2, padx=5, pady=5)

tk.Label(frame, text="Amount").grid(row=1, column=0, padx=5, pady=5)
amount_entry = tk.Entry(frame)
amount_entry.grid(row=1, column=1, padx=5, pady=5)

tk.Label(frame, text="Description").grid(row=2, column=0, padx=5, pady=5)
description_entry = tk.Entry(frame)
description_entry.grid(row=2, column=1, padx=5, pady=5)

tk.Label(frame, text="Date (YYYY-MM-DD)").grid(row=3, column=0, padx=5, pady=5)
date_entry = tk.Entry(frame)
date_entry.grid(row=3, column=1, padx=5, pady=5)

tk.Button(frame, text="Add Transaction", command=add_transaction).grid(row=4, column=0, columnspan=3, pady=10)
tk.Button(frame, text="Edit Transaction", command=edit_transaction).grid(row=5, column=0, columnspan=3, pady=10)
tk.Button(frame, text="Delete Transaction", command=delete_transaction).grid(row=6, column=0, columnspan=3, pady=10)

# สร้าง Treeview สำหรับแสดงข้อมูล
columns = ("ID", "Type", "Amount", "Description", "Date")
tree = ttk.Treeview(root, columns=columns, show='headings')
tree.heading("ID", text="ID")
tree.heading("Type", text="Type")
tree.heading("Amount", text="Amount")
tree.heading("Description", text="Description")
tree.heading("Date", text="Date")
tree.pack(padx=10, pady=10)

update_treeview()

root.mainloop()
